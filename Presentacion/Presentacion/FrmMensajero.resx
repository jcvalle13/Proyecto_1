<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>